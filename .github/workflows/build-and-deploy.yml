# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: express lambda CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js '20.x'
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Lint and Automatically Fix
        run: npm run lint:fix

  unit-and-integration-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js '20.x'
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test -- --forceExit --detectOpenHandles

  security-SAST-code:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run sast-scan for SAST
        uses: AppThreat/sast-scan-action@master
        with:
          type: "nodejs"

      - name: Upload sast-scan reports to artifacts
        uses: actions/upload-artifact@v1
        with:
          name: sast-scan-reports
          path: reports/

  codeQL-analysis:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: "javascript"
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  security-DAST-Staging-URL:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: false
        uses: actions/checkout@v2

      - name: OWASP ZAP Scan
        if: false
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: "xxxxx"

  performance-test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Run Lighthouse
        if: false
        uses: treosh/lighthouse-ci-action@v8
        with:
          urls: "xxxxx"

  prepare-release:
    runs-on: ubuntu-latest
    needs: [performance-test, security-DAST-Staging-URL, security-SAST-code]
    outputs:
      commit-message: ${{ steps.commit-message.outputs.message }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get the last commit message
        id: commit-message
        run: echo "::set-output name=message::$(git log -1 --pretty=%B)"

  build-and-deploy-test-env:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: prepare-release

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Zip current folder
        run: |
          zip -r send-express.zip .

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
          --function-name express \
          --zip-file fileb://send-express.zip

  build-and-deploy-prod-env:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: prepare-release

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install Node.js dependencies
        run: npm ci --production

      - name: Zip current folder
        run: |
          zip -r send-express.zip .

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
          --function-name express \
          --zip-file fileb://send-express.zip
